---
import "../styles/global.css";

const baseUrl = new URL(Astro.request.url).origin;
const response = await fetch(`${baseUrl}/api/spotify`);
const data = await response.json();
const albums = data.items ?? [];

interface Album {
  id: string;
  name: string;
  images: { url: string }[];
  external_urls: { spotify: string };
}
---

<html lang="en">
  <head>
    <title>My Music | Jacob Porter Smith</title>
    <!-- Modern, fresh font -->
    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@400;600;900&display=swap"
      rel="stylesheet"
    />

    <style>
      .spotify-link {
        display: inline-block;
        margin-top: 2rem;
        padding: 0.75rem 1.5rem;
        background-color: #1db954; /* Spotify green */
        color: white;
        font-weight: bold;
        text-decoration: none;
        border-radius: 9999px;
        transition: background-color 0.3s;
        text-align: center;
      }

      .spotify-link:hover {
        background-color: #159b43;
      }

      /* Keep the body from scrolling horizontally */
      body {
        font-family: "Outfit", sans-serif;
        color: white;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        /* Hide horizontal scrollbar at the page level */
        overflow-x: hidden;
      }

      h1,
      h2 {
        font-weight: 900;
      }

      /* Carousel for large screens */
      .carousel-wrapper {
        overflow: hidden; /* hide horizontal scrollbar on desktop */
        position: relative;
        width: 100%;
        margin-top: 3rem;
      }
      .carousel-track {
        display: flex;
        gap: 4rem;
        animation: scroll 40s linear infinite; /* infinite scroll on desktop */
        flex-wrap: nowrap; /* keep items on one line */
      }
      .carousel-track::after {
        content: "";
        display: block;
        flex-shrink: 0;
        width: 50%;
      }

      @keyframes scroll {
        0% {
          transform: translateX(0);
        }
        100% {
          transform: translateX(-50%);
        }
      }

      .carousel-wrapper:hover .carousel-track {
        animation-play-state: paused;
      }

      .album-card {
        flex-shrink: 0;
        width: 220px;
        height: 220px;
        position: relative;
        transition:
          transform 0.5s,
          box-shadow 0.5s;
        will-change: transform;
      }

      .album-card:hover {
        transform: perspective(800px) rotateY(5deg) scale(1.2);
        z-index: 5;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.6);
      }

      .album-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 1.5rem;
        transition: filter 0.5s;
      }

      .album-card:hover .album-img {
        filter: brightness(70%);
      }

      .album-title {
        position: absolute;
        inset: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1rem;
        background: rgba(0, 0, 0, 0.5);
        opacity: 0;
        border-radius: 1.5rem;
        transition: opacity 0.5s;
      }

      .album-card:hover .album-title {
        opacity: 1;
      }
      .discover-header {
        font-size: 2.5rem;
        font-weight: 900;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
      }

      .album-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.7); /* translucent white background */
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 50;
        visibility: hidden; /* HIDDEN by default */
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .album-modal.show {
        visibility: visible;
        opacity: 1;
      }

      .album-modal-content {
        background: white;
        color: black;
        padding: 2rem;
        border-radius: 1.5rem;
        width: 90%;
        max-width: 600px;
        max-height: 90%;
        overflow-y: auto;
        position: relative;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      }

      .modal-close-button {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-size: 2rem;
        background: none;
        border: none;
        cursor: pointer;
        color: black;
      }

      .modal-title {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
      }

      .modal-tracklist {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }

      .modal-tracklist li {
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-bottom: 1px solid #4b5563; /* Tailwind's gray-700 */
        padding-bottom: 0.5rem;
        font-size: 1rem;
      }

      .modal-tracklist audio {
        height: 2rem;
      }

      .explore-message {
        font-size: 1rem;
        color: white;
        text-align: center;
      }

      .desktop-message {
        font-style: italic;
        color: rgba(255, 255, 255, 0.7);
      }

      .mobile-message {
        display: none;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-weight: 600;
        color: rgba(255, 255, 255, 0.9);
      }

      .bounce-arrow {
        display: inline-block;
        animation: bounce 1s infinite alternate;
      }

      /* Bounce animation */
      @keyframes bounce {
        0% {
          transform: translateX(0);
        }
        100% {
          transform: translateX(8px);
        }
      }

      /* Switch on mobile */
      @media (max-width: 640px) {
        .desktop-message {
          display: none;
        }
        .mobile-message {
          display: flex;
        }
      }

      @media (max-width: 600px) {
        .discover-header {
          font-size: 2rem;
          margin-bottom: 1.5rem;
        }

        .carousel-track {
          animation: none; /* no infinite scroll on mobile */
          gap: 1rem;
          flex-wrap: nowrap;
          padding-left: 10px;
          padding-right: 10px;
          width: max-content; /* <<---- ADD THIS to allow internal scroll */
        }
        .carousel-track::after {
          width: 0;
          content: none;
        }
        .album-modal-content {
          margin-left: 10px;
          margin-right: 10px;
        }
        .carousel-wrapper {
          overflow-x: auto;
          max-width: 100%;
          width: 100%;
          flex: 1 0 auto;
          align-self: stretch;

          padding-bottom: 1rem;
        }
        .album-card {
          width: 200px;
          height: 200px;
          flex-shrink: 0;
        }

        .carousel-track .second-batch {
          display: none;
        }
      }
    </style>
  </head>

  <section id="music" class="flex flex-col text-center">
    <h2 class="discover-header">Discover My Music</h2>

    <div class="carousel-wrapper">
      <div class="carousel-track">
        {
          albums.map((album: Album) => (
            <div
              class="album-card group cursor-pointer"
              data-album-id={album.id}
              data-album-name={album.name}
            >
              <img
                src={album.images[0]?.url ?? ""}
                alt={album.name}
                class="album-img"
              />
              <div class="album-title">
                <span>{album.name}</span>
              </div>
            </div>
          ))
        }
        {
          albums.map((album: Album) => (
            <div
              class="album-card second-batch group cursor-pointer"
              data-album-id={album.id}
              data-album-name={album.name}
            >
              <img
                src={album.images[0]?.url ?? ""}
                alt={album.name}
                class="album-img"
              />
              <div class="album-title">
                <span>{album.name}</span>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <div class="explore-message">
      <p class="desktop-message">
        Hover to pause, click an album to explore its songs.
      </p>
      <p class="mobile-message">
        Scroll to explore, tap to see the songs <span class="bounce-arrow"
          >&rarr;</span
        >
      </p>
    </div>
  </section>
  <div id="albumModal" class="album-modal hidden">
    <div class="album-modal-content">
      <button id="closeModal" class="modal-close-button"> &times; </button>
      <h2 id="modalTitle" class="modal-title"></h2>
      <ul id="modalTracks" class="modal-tracklist"></ul>
    </div>
  </div>
  <script type="module">
    const modal = document.getElementById("albumModal");
    const closeModal = document.getElementById("closeModal");
    const modalTitle = document.getElementById("modalTitle");
    const modalTracks = document.getElementById("modalTracks");

    closeModal.addEventListener("click", () => {
      modal.classList.remove("show");
      modalTracks.innerHTML = "";
    });

    modal.addEventListener("click", (e) => {
      // Only close if clicking directly on the modal background (not on content)
      if (e.target === modal) {
        modal.classList.remove("show");
        modalTracks.innerHTML = "";
      }
    });

    document.querySelectorAll(".album-card").forEach((card) => {
      card.addEventListener("click", async () => {
        const albumId = card.getAttribute("data-album-id");
        const albumName = card.getAttribute("data-album-name");
        await openAlbumModal(albumId, albumName);
      });
    });

    async function openAlbumModal(albumId, albumName) {
      modal.classList.add("show");
      modalTitle.textContent = albumName;
      modalTracks.innerHTML = "";

      try {
        const baseUrl = window.location.origin;
        const tokenRes = await fetch(`${baseUrl}/api/token`);
        const { access_token } = await tokenRes.json();

        const albumRes = await fetch(
          `https://api.spotify.com/v1/albums/${albumId}`,
          {
            headers: { Authorization: `Bearer ${access_token}` },
          }
        );

        const albumData = await albumRes.json();
        const tracks = albumData.tracks.items;

        tracks.forEach((track) => {
          const li = document.createElement("li");
          li.innerHTML = `
        <span>${track.track_number}. ${track.name}</span>
        ${track.preview_url ? `<audio controls src="${track.preview_url}" preload="none"></audio>` : ""}
      `;
          modalTracks.appendChild(li);
        });

        // 🎵 Add Spotify Link at the bottom
        const spotifyLink = document.createElement("a");
        spotifyLink.href = albumData.external_urls.spotify;
        spotifyLink.target = "_blank";
        spotifyLink.rel = "noopener noreferrer";
        spotifyLink.textContent = "🔗 Listen on Spotify";
        spotifyLink.className = "spotify-link";
        modalTracks.appendChild(spotifyLink);
      } catch (err) {
        console.error("Failed to fetch album tracks", err);
        modalTracks.innerHTML =
          "<li style='color:red;'>Failed to load tracks.</li>";
      }
    }
  </script>


</html>
